# Generated from c://Code//PPL//BTL_test//src//main//minigo//parser//MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,66,487,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,
        1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
        1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,5,51,333,8,51,10,51,12,51,
        336,9,51,1,52,5,52,339,8,52,10,52,12,52,342,9,52,1,52,1,52,1,52,
        5,52,347,8,52,10,52,12,52,350,9,52,1,52,1,52,3,52,354,8,52,1,52,
        5,52,357,8,52,10,52,12,52,360,9,52,1,52,3,52,363,8,52,1,53,1,53,
        1,53,4,53,368,8,53,11,53,12,53,369,3,53,372,8,53,1,54,1,54,1,54,
        4,54,377,8,54,11,54,12,54,378,1,55,1,55,1,55,4,55,384,8,55,11,55,
        12,55,385,1,56,1,56,1,56,4,56,391,8,56,11,56,12,56,392,1,57,1,57,
        5,57,397,8,57,10,57,12,57,400,9,57,1,57,1,57,1,58,1,58,3,58,406,
        8,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,3,61,416,8,61,1,62,
        3,62,419,8,62,1,62,4,62,422,8,62,11,62,12,62,423,1,62,1,62,1,63,
        4,63,429,8,63,11,63,12,63,430,1,63,1,63,1,64,1,64,1,64,1,64,1,64,
        5,64,440,8,64,10,64,12,64,443,9,64,1,64,1,64,1,64,1,64,1,64,1,65,
        1,65,1,65,1,65,5,65,454,8,65,10,65,12,65,457,9,65,1,65,1,65,1,66,
        1,66,1,66,1,67,1,67,5,67,466,8,67,10,67,12,67,469,9,67,1,67,1,67,
        1,67,3,67,474,8,67,1,67,1,67,1,68,1,68,5,68,480,8,68,10,68,12,68,
        483,9,68,1,68,1,68,1,68,1,441,0,69,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,0,119,0,
        121,0,123,59,125,60,127,61,129,62,131,63,133,64,135,65,137,66,1,
        0,18,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        48,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,49,57,2,0,66,
        66,98,98,1,0,48,49,2,0,79,79,111,111,1,0,48,55,2,0,88,88,120,120,
        3,0,48,57,65,70,97,102,4,0,10,10,13,13,34,34,92,92,5,0,34,34,92,
        92,110,110,114,114,116,116,3,0,9,9,12,13,32,32,2,0,10,10,13,13,1,
        1,10,10,506,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
        0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,123,1,
        0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,
        133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,1,139,1,0,0,0,3,142,1,0,
        0,0,5,147,1,0,0,0,7,151,1,0,0,0,9,158,1,0,0,0,11,163,1,0,0,0,13,
        168,1,0,0,0,15,175,1,0,0,0,17,185,1,0,0,0,19,192,1,0,0,0,21,196,
        1,0,0,0,23,202,1,0,0,0,25,210,1,0,0,0,27,216,1,0,0,0,29,220,1,0,
        0,0,31,229,1,0,0,0,33,235,1,0,0,0,35,241,1,0,0,0,37,245,1,0,0,0,
        39,250,1,0,0,0,41,256,1,0,0,0,43,258,1,0,0,0,45,261,1,0,0,0,47,263,
        1,0,0,0,49,265,1,0,0,0,51,268,1,0,0,0,53,270,1,0,0,0,55,273,1,0,
        0,0,57,276,1,0,0,0,59,279,1,0,0,0,61,281,1,0,0,0,63,284,1,0,0,0,
        65,287,1,0,0,0,67,290,1,0,0,0,69,293,1,0,0,0,71,296,1,0,0,0,73,299,
        1,0,0,0,75,302,1,0,0,0,77,304,1,0,0,0,79,306,1,0,0,0,81,308,1,0,
        0,0,83,310,1,0,0,0,85,312,1,0,0,0,87,314,1,0,0,0,89,316,1,0,0,0,
        91,318,1,0,0,0,93,320,1,0,0,0,95,322,1,0,0,0,97,324,1,0,0,0,99,326,
        1,0,0,0,101,328,1,0,0,0,103,330,1,0,0,0,105,340,1,0,0,0,107,371,
        1,0,0,0,109,373,1,0,0,0,111,380,1,0,0,0,113,387,1,0,0,0,115,394,
        1,0,0,0,117,405,1,0,0,0,119,407,1,0,0,0,121,410,1,0,0,0,123,415,
        1,0,0,0,125,421,1,0,0,0,127,428,1,0,0,0,129,434,1,0,0,0,131,449,
        1,0,0,0,133,460,1,0,0,0,135,463,1,0,0,0,137,477,1,0,0,0,139,140,
        5,105,0,0,140,141,5,102,0,0,141,2,1,0,0,0,142,143,5,101,0,0,143,
        144,5,108,0,0,144,145,5,115,0,0,145,146,5,101,0,0,146,4,1,0,0,0,
        147,148,5,102,0,0,148,149,5,111,0,0,149,150,5,114,0,0,150,6,1,0,
        0,0,151,152,5,114,0,0,152,153,5,101,0,0,153,154,5,116,0,0,154,155,
        5,117,0,0,155,156,5,114,0,0,156,157,5,110,0,0,157,8,1,0,0,0,158,
        159,5,102,0,0,159,160,5,117,0,0,160,161,5,110,0,0,161,162,5,99,0,
        0,162,10,1,0,0,0,163,164,5,116,0,0,164,165,5,121,0,0,165,166,5,112,
        0,0,166,167,5,101,0,0,167,12,1,0,0,0,168,169,5,115,0,0,169,170,5,
        116,0,0,170,171,5,114,0,0,171,172,5,117,0,0,172,173,5,99,0,0,173,
        174,5,116,0,0,174,14,1,0,0,0,175,176,5,105,0,0,176,177,5,110,0,0,
        177,178,5,116,0,0,178,179,5,101,0,0,179,180,5,114,0,0,180,181,5,
        102,0,0,181,182,5,97,0,0,182,183,5,99,0,0,183,184,5,101,0,0,184,
        16,1,0,0,0,185,186,5,115,0,0,186,187,5,116,0,0,187,188,5,114,0,0,
        188,189,5,105,0,0,189,190,5,110,0,0,190,191,5,103,0,0,191,18,1,0,
        0,0,192,193,5,105,0,0,193,194,5,110,0,0,194,195,5,116,0,0,195,20,
        1,0,0,0,196,197,5,102,0,0,197,198,5,108,0,0,198,199,5,111,0,0,199,
        200,5,97,0,0,200,201,5,116,0,0,201,22,1,0,0,0,202,203,5,98,0,0,203,
        204,5,111,0,0,204,205,5,111,0,0,205,206,5,108,0,0,206,207,5,101,
        0,0,207,208,5,97,0,0,208,209,5,110,0,0,209,24,1,0,0,0,210,211,5,
        99,0,0,211,212,5,111,0,0,212,213,5,110,0,0,213,214,5,115,0,0,214,
        215,5,116,0,0,215,26,1,0,0,0,216,217,5,118,0,0,217,218,5,97,0,0,
        218,219,5,114,0,0,219,28,1,0,0,0,220,221,5,99,0,0,221,222,5,111,
        0,0,222,223,5,110,0,0,223,224,5,116,0,0,224,225,5,105,0,0,225,226,
        5,110,0,0,226,227,5,117,0,0,227,228,5,101,0,0,228,30,1,0,0,0,229,
        230,5,98,0,0,230,231,5,114,0,0,231,232,5,101,0,0,232,233,5,97,0,
        0,233,234,5,107,0,0,234,32,1,0,0,0,235,236,5,114,0,0,236,237,5,97,
        0,0,237,238,5,110,0,0,238,239,5,103,0,0,239,240,5,101,0,0,240,34,
        1,0,0,0,241,242,5,110,0,0,242,243,5,105,0,0,243,244,5,108,0,0,244,
        36,1,0,0,0,245,246,5,116,0,0,246,247,5,114,0,0,247,248,5,117,0,0,
        248,249,5,101,0,0,249,38,1,0,0,0,250,251,5,102,0,0,251,252,5,97,
        0,0,252,253,5,108,0,0,253,254,5,115,0,0,254,255,5,101,0,0,255,40,
        1,0,0,0,256,257,5,46,0,0,257,42,1,0,0,0,258,259,5,58,0,0,259,260,
        5,61,0,0,260,44,1,0,0,0,261,262,5,58,0,0,262,46,1,0,0,0,263,264,
        5,60,0,0,264,48,1,0,0,0,265,266,5,60,0,0,266,267,5,61,0,0,267,50,
        1,0,0,0,268,269,5,62,0,0,269,52,1,0,0,0,270,271,5,62,0,0,271,272,
        5,61,0,0,272,54,1,0,0,0,273,274,5,61,0,0,274,275,5,61,0,0,275,56,
        1,0,0,0,276,277,5,33,0,0,277,278,5,61,0,0,278,58,1,0,0,0,279,280,
        5,61,0,0,280,60,1,0,0,0,281,282,5,43,0,0,282,283,5,61,0,0,283,62,
        1,0,0,0,284,285,5,45,0,0,285,286,5,61,0,0,286,64,1,0,0,0,287,288,
        5,42,0,0,288,289,5,61,0,0,289,66,1,0,0,0,290,291,5,47,0,0,291,292,
        5,61,0,0,292,68,1,0,0,0,293,294,5,37,0,0,294,295,5,61,0,0,295,70,
        1,0,0,0,296,297,5,38,0,0,297,298,5,38,0,0,298,72,1,0,0,0,299,300,
        5,124,0,0,300,301,5,124,0,0,301,74,1,0,0,0,302,303,5,33,0,0,303,
        76,1,0,0,0,304,305,5,43,0,0,305,78,1,0,0,0,306,307,5,45,0,0,307,
        80,1,0,0,0,308,309,5,42,0,0,309,82,1,0,0,0,310,311,5,47,0,0,311,
        84,1,0,0,0,312,313,5,37,0,0,313,86,1,0,0,0,314,315,5,40,0,0,315,
        88,1,0,0,0,316,317,5,41,0,0,317,90,1,0,0,0,318,319,5,123,0,0,319,
        92,1,0,0,0,320,321,5,125,0,0,321,94,1,0,0,0,322,323,5,91,0,0,323,
        96,1,0,0,0,324,325,5,93,0,0,325,98,1,0,0,0,326,327,5,59,0,0,327,
        100,1,0,0,0,328,329,5,44,0,0,329,102,1,0,0,0,330,334,7,0,0,0,331,
        333,7,1,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,
        335,1,0,0,0,335,104,1,0,0,0,336,334,1,0,0,0,337,339,7,2,0,0,338,
        337,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,
        343,1,0,0,0,342,340,1,0,0,0,343,344,3,107,53,0,344,348,3,41,20,0,
        345,347,7,3,0,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,
        348,349,1,0,0,0,349,362,1,0,0,0,350,348,1,0,0,0,351,353,7,4,0,0,
        352,354,7,5,0,0,353,352,1,0,0,0,353,354,1,0,0,0,354,358,1,0,0,0,
        355,357,7,2,0,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,
        358,359,1,0,0,0,359,361,1,0,0,0,360,358,1,0,0,0,361,363,3,107,53,
        0,362,351,1,0,0,0,362,363,1,0,0,0,363,106,1,0,0,0,364,372,7,3,0,
        0,365,367,7,6,0,0,366,368,7,3,0,0,367,366,1,0,0,0,368,369,1,0,0,
        0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,364,1,0,0,
        0,371,365,1,0,0,0,372,108,1,0,0,0,373,374,7,2,0,0,374,376,7,7,0,
        0,375,377,7,8,0,0,376,375,1,0,0,0,377,378,1,0,0,0,378,376,1,0,0,
        0,378,379,1,0,0,0,379,110,1,0,0,0,380,381,7,2,0,0,381,383,7,9,0,
        0,382,384,7,10,0,0,383,382,1,0,0,0,384,385,1,0,0,0,385,383,1,0,0,
        0,385,386,1,0,0,0,386,112,1,0,0,0,387,388,7,2,0,0,388,390,7,11,0,
        0,389,391,7,12,0,0,390,389,1,0,0,0,391,392,1,0,0,0,392,390,1,0,0,
        0,392,393,1,0,0,0,393,114,1,0,0,0,394,398,5,34,0,0,395,397,3,117,
        58,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,
        0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,402,5,34,0,0,402,116,1,0,
        0,0,403,406,3,119,59,0,404,406,8,13,0,0,405,403,1,0,0,0,405,404,
        1,0,0,0,406,118,1,0,0,0,407,408,5,92,0,0,408,409,7,14,0,0,409,120,
        1,0,0,0,410,411,5,92,0,0,411,412,8,14,0,0,412,122,1,0,0,0,413,416,
        3,37,18,0,414,416,3,39,19,0,415,413,1,0,0,0,415,414,1,0,0,0,416,
        124,1,0,0,0,417,419,5,13,0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,
        420,1,0,0,0,420,422,5,10,0,0,421,418,1,0,0,0,422,423,1,0,0,0,423,
        421,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,6,62,0,0,426,
        126,1,0,0,0,427,429,7,15,0,0,428,427,1,0,0,0,429,430,1,0,0,0,430,
        428,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,6,63,1,0,433,
        128,1,0,0,0,434,435,5,47,0,0,435,436,5,42,0,0,436,441,1,0,0,0,437,
        440,3,129,64,0,438,440,9,0,0,0,439,437,1,0,0,0,439,438,1,0,0,0,440,
        443,1,0,0,0,441,442,1,0,0,0,441,439,1,0,0,0,442,444,1,0,0,0,443,
        441,1,0,0,0,444,445,5,42,0,0,445,446,5,47,0,0,446,447,1,0,0,0,447,
        448,6,64,1,0,448,130,1,0,0,0,449,450,5,47,0,0,450,451,5,47,0,0,451,
        455,1,0,0,0,452,454,8,16,0,0,453,452,1,0,0,0,454,457,1,0,0,0,455,
        453,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,455,1,0,0,0,458,
        459,6,65,1,0,459,132,1,0,0,0,460,461,9,0,0,0,461,462,6,66,2,0,462,
        134,1,0,0,0,463,467,5,34,0,0,464,466,3,117,58,0,465,464,1,0,0,0,
        466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,473,1,0,0,0,
        469,467,1,0,0,0,470,471,5,13,0,0,471,474,5,10,0,0,472,474,7,17,0,
        0,473,470,1,0,0,0,473,472,1,0,0,0,474,475,1,0,0,0,475,476,6,67,3,
        0,476,136,1,0,0,0,477,481,5,34,0,0,478,480,3,117,58,0,479,478,1,
        0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,484,1,
        0,0,0,483,481,1,0,0,0,484,485,3,121,60,0,485,486,6,68,4,0,486,138,
        1,0,0,0,24,0,334,340,348,353,358,362,369,371,378,385,392,398,405,
        415,418,423,430,439,441,455,467,473,481,5,1,62,0,6,0,0,1,66,1,1,
        67,2,1,68,3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    DOT = 21
    COLONASSIGN = 22
    COLON = 23
    LT = 24
    LE = 25
    GT = 26
    GE = 27
    EQ = 28
    NE = 29
    ASSIGN = 30
    ADD_ASSIGN = 31
    SUB_ASSIGN = 32
    MUL_ASSIGN = 33
    DIV_ASSIGN = 34
    MOD_ASSIGN = 35
    AND = 36
    OR = 37
    NOT = 38
    ADD = 39
    SUB = 40
    MUL = 41
    DIV = 42
    MOD = 43
    LPAREN = 44
    RPAREN = 45
    LBRACE = 46
    RBRACE = 47
    LBRACKET = 48
    RBRACKET = 49
    SEMICOLON = 50
    COMMA = 51
    ID = 52
    FLOAT_LIT = 53
    INT_DEC = 54
    INT_BIN = 55
    INT_OCT = 56
    INT_HEX = 57
    STRING_LIT = 58
    BOOLEAN_LIT = 59
    NEWLINE = 60
    WS = 61
    COMMENTS = 62
    COMMENTS_LINE = 63
    ERROR_CHAR = 64
    UNCLOSE_STRING = 65
    ILLEGAL_ESCAPE = 66

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'.'", "':='", "':'", "'<'", "'<='", "'>'", 
            "'>='", "'=='", "'!='", "'='", "'+='", "'-='", "'*='", "'/='", 
            "'%='", "'&&'", "'||'", "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "DOT", "COLONASSIGN", 
            "COLON", "LT", "LE", "GT", "GE", "EQ", "NE", "ASSIGN", "ADD_ASSIGN", 
            "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND", 
            "OR", "NOT", "ADD", "SUB", "MUL", "DIV", "MOD", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMICOLON", "COMMA", 
            "ID", "FLOAT_LIT", "INT_DEC", "INT_BIN", "INT_OCT", "INT_HEX", 
            "STRING_LIT", "BOOLEAN_LIT", "NEWLINE", "WS", "COMMENTS", "COMMENTS_LINE", 
            "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "DOT", "COLONASSIGN", "COLON", "LT", "LE", "GT", "GE", 
                  "EQ", "NE", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                  "DIV_ASSIGN", "MOD_ASSIGN", "AND", "OR", "NOT", "ADD", 
                  "SUB", "MUL", "DIV", "MOD", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "LBRACKET", "RBRACKET", "SEMICOLON", "COMMA", 
                  "ID", "FLOAT_LIT", "INT_DEC", "INT_BIN", "INT_OCT", "INT_HEX", 
                  "STRING_LIT", "STR_CHAR", "ESC_SEQ", "ESC_ILLEGAL", "BOOLEAN_LIT", 
                  "NEWLINE", "WS", "COMMENTS", "COMMENTS_LINE", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    prevtoken = None
    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            self.prevtoken = result;
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            self.prevtoken = result;
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            self.prevtoken = result;
            raise ErrorToken(result.text); 
        else:
            result = super().emit()
            self.prevtoken = result
            return result


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[62] = self.NEWLINE_action 
            actions[66] = self.ERROR_CHAR_action 
            actions[67] = self.UNCLOSE_STRING_action 
            actions[68] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                if self.prevtoken is not None and self.prevtoken.type in {
                    self.ID, self.RPAREN, self.RBRACKET, self.RBRACE,
                    self.INT_DEC, self.INT_BIN, self.INT_OCT, self.INT_HEX,
                    self.FLOAT_LIT, self.TRUE, self.FALSE, self.STRING_LIT,
                    self.RETURN, self.CONTINUE, self.BREAK,
                    self.INT, self.FLOAT, self.BOOLEAN, self.STRING, self.NIL
                }:
                    self.text = ";"
                    self.type = self.SEMICOLON
                    
                else:
                    self.skip()
                    

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[0:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[0:-1])
                else:
                    raise UncloseString(self.text[0:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                raise IllegalEscape(self.text[0:])

     


