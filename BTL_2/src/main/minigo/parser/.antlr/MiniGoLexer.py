# Generated from c://Code//PPL//BTL_2//src//main//minigo//parser//MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,64,528,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,1,0,1,0,3,0,152,8,0,1,1,1,1,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
        14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
        21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,
        27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,
        32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,
        37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,
        41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,
        47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,5,
        53,349,8,53,10,53,12,53,352,9,53,1,54,1,54,1,54,1,54,3,54,358,8,
        54,1,54,4,54,361,8,54,11,54,12,54,362,1,54,1,54,1,55,1,55,1,55,1,
        55,3,55,371,8,55,1,55,4,55,374,8,55,11,55,12,55,375,1,55,1,55,1,
        56,1,56,1,56,1,56,3,56,384,8,56,1,56,4,56,387,8,56,11,56,12,56,388,
        1,56,1,56,1,57,1,57,1,58,1,58,1,58,5,58,398,8,58,10,58,12,58,401,
        9,58,3,58,403,8,58,1,59,5,59,406,8,59,10,59,12,59,409,9,59,3,59,
        411,8,59,1,60,1,60,3,60,415,8,60,1,60,4,60,418,8,60,11,60,12,60,
        419,3,60,422,8,60,1,61,1,61,1,61,5,61,427,8,61,10,61,12,61,430,9,
        61,3,61,432,8,61,1,62,4,62,435,8,62,11,62,12,62,436,1,62,1,62,1,
        62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,3,65,451,8,65,1,
        66,1,66,5,66,455,8,66,10,66,12,66,458,9,66,1,66,1,66,1,67,4,67,463,
        8,67,11,67,12,67,464,1,67,1,67,1,68,3,68,470,8,68,1,68,1,68,1,68,
        1,68,1,69,1,69,1,69,1,69,1,69,5,69,481,8,69,10,69,12,69,484,9,69,
        1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,5,70,495,8,70,10,70,
        12,70,498,9,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,5,72,507,8,72,
        10,72,12,72,510,9,72,1,72,1,72,1,72,3,72,515,8,72,1,72,1,72,1,73,
        1,73,5,73,521,8,73,10,73,12,73,524,9,73,1,73,1,73,1,73,1,482,0,74,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,0,111,0,
        113,0,115,0,117,0,119,0,121,0,123,55,125,56,127,0,129,0,131,0,133,
        57,135,58,137,59,139,60,141,61,143,62,145,63,147,64,1,0,14,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,49,1,0,48,55,
        3,0,48,57,65,70,97,102,1,0,48,57,1,0,49,57,2,0,69,69,101,101,2,0,
        43,43,45,45,5,0,34,34,92,92,110,110,114,114,116,116,4,0,10,10,13,
        13,34,34,92,92,3,0,9,9,12,13,32,32,2,0,10,10,13,13,1,1,10,10,548,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,133,1,
        0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,
        143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,1,151,1,0,0,0,3,153,1,0,
        0,0,5,155,1,0,0,0,7,158,1,0,0,0,9,163,1,0,0,0,11,167,1,0,0,0,13,
        174,1,0,0,0,15,179,1,0,0,0,17,184,1,0,0,0,19,191,1,0,0,0,21,201,
        1,0,0,0,23,208,1,0,0,0,25,212,1,0,0,0,27,218,1,0,0,0,29,226,1,0,
        0,0,31,232,1,0,0,0,33,236,1,0,0,0,35,245,1,0,0,0,37,251,1,0,0,0,
        39,257,1,0,0,0,41,261,1,0,0,0,43,266,1,0,0,0,45,272,1,0,0,0,47,274,
        1,0,0,0,49,276,1,0,0,0,51,278,1,0,0,0,53,280,1,0,0,0,55,282,1,0,
        0,0,57,285,1,0,0,0,59,288,1,0,0,0,61,290,1,0,0,0,63,293,1,0,0,0,
        65,295,1,0,0,0,67,298,1,0,0,0,69,301,1,0,0,0,71,304,1,0,0,0,73,306,
        1,0,0,0,75,308,1,0,0,0,77,311,1,0,0,0,79,314,1,0,0,0,81,317,1,0,
        0,0,83,320,1,0,0,0,85,323,1,0,0,0,87,326,1,0,0,0,89,328,1,0,0,0,
        91,330,1,0,0,0,93,332,1,0,0,0,95,334,1,0,0,0,97,336,1,0,0,0,99,338,
        1,0,0,0,101,340,1,0,0,0,103,342,1,0,0,0,105,344,1,0,0,0,107,346,
        1,0,0,0,109,357,1,0,0,0,111,370,1,0,0,0,113,383,1,0,0,0,115,392,
        1,0,0,0,117,402,1,0,0,0,119,410,1,0,0,0,121,421,1,0,0,0,123,431,
        1,0,0,0,125,434,1,0,0,0,127,442,1,0,0,0,129,445,1,0,0,0,131,450,
        1,0,0,0,133,452,1,0,0,0,135,462,1,0,0,0,137,469,1,0,0,0,139,475,
        1,0,0,0,141,490,1,0,0,0,143,501,1,0,0,0,145,504,1,0,0,0,147,518,
        1,0,0,0,149,152,3,41,20,0,150,152,3,43,21,0,151,149,1,0,0,0,151,
        150,1,0,0,0,152,2,1,0,0,0,153,154,3,39,19,0,154,4,1,0,0,0,155,156,
        5,105,0,0,156,157,5,102,0,0,157,6,1,0,0,0,158,159,5,101,0,0,159,
        160,5,108,0,0,160,161,5,115,0,0,161,162,5,101,0,0,162,8,1,0,0,0,
        163,164,5,102,0,0,164,165,5,111,0,0,165,166,5,114,0,0,166,10,1,0,
        0,0,167,168,5,114,0,0,168,169,5,101,0,0,169,170,5,116,0,0,170,171,
        5,117,0,0,171,172,5,114,0,0,172,173,5,110,0,0,173,12,1,0,0,0,174,
        175,5,102,0,0,175,176,5,117,0,0,176,177,5,110,0,0,177,178,5,99,0,
        0,178,14,1,0,0,0,179,180,5,116,0,0,180,181,5,121,0,0,181,182,5,112,
        0,0,182,183,5,101,0,0,183,16,1,0,0,0,184,185,5,115,0,0,185,186,5,
        116,0,0,186,187,5,114,0,0,187,188,5,117,0,0,188,189,5,99,0,0,189,
        190,5,116,0,0,190,18,1,0,0,0,191,192,5,105,0,0,192,193,5,110,0,0,
        193,194,5,116,0,0,194,195,5,101,0,0,195,196,5,114,0,0,196,197,5,
        102,0,0,197,198,5,97,0,0,198,199,5,99,0,0,199,200,5,101,0,0,200,
        20,1,0,0,0,201,202,5,115,0,0,202,203,5,116,0,0,203,204,5,114,0,0,
        204,205,5,105,0,0,205,206,5,110,0,0,206,207,5,103,0,0,207,22,1,0,
        0,0,208,209,5,105,0,0,209,210,5,110,0,0,210,211,5,116,0,0,211,24,
        1,0,0,0,212,213,5,102,0,0,213,214,5,108,0,0,214,215,5,111,0,0,215,
        216,5,97,0,0,216,217,5,116,0,0,217,26,1,0,0,0,218,219,5,98,0,0,219,
        220,5,111,0,0,220,221,5,111,0,0,221,222,5,108,0,0,222,223,5,101,
        0,0,223,224,5,97,0,0,224,225,5,110,0,0,225,28,1,0,0,0,226,227,5,
        99,0,0,227,228,5,111,0,0,228,229,5,110,0,0,229,230,5,115,0,0,230,
        231,5,116,0,0,231,30,1,0,0,0,232,233,5,118,0,0,233,234,5,97,0,0,
        234,235,5,114,0,0,235,32,1,0,0,0,236,237,5,99,0,0,237,238,5,111,
        0,0,238,239,5,110,0,0,239,240,5,116,0,0,240,241,5,105,0,0,241,242,
        5,110,0,0,242,243,5,117,0,0,243,244,5,101,0,0,244,34,1,0,0,0,245,
        246,5,98,0,0,246,247,5,114,0,0,247,248,5,101,0,0,248,249,5,97,0,
        0,249,250,5,107,0,0,250,36,1,0,0,0,251,252,5,114,0,0,252,253,5,97,
        0,0,253,254,5,110,0,0,254,255,5,103,0,0,255,256,5,101,0,0,256,38,
        1,0,0,0,257,258,5,110,0,0,258,259,5,105,0,0,259,260,5,108,0,0,260,
        40,1,0,0,0,261,262,5,116,0,0,262,263,5,114,0,0,263,264,5,117,0,0,
        264,265,5,101,0,0,265,42,1,0,0,0,266,267,5,102,0,0,267,268,5,97,
        0,0,268,269,5,108,0,0,269,270,5,115,0,0,270,271,5,101,0,0,271,44,
        1,0,0,0,272,273,5,43,0,0,273,46,1,0,0,0,274,275,5,45,0,0,275,48,
        1,0,0,0,276,277,5,42,0,0,277,50,1,0,0,0,278,279,5,47,0,0,279,52,
        1,0,0,0,280,281,5,37,0,0,281,54,1,0,0,0,282,283,5,61,0,0,283,284,
        5,61,0,0,284,56,1,0,0,0,285,286,5,33,0,0,286,287,5,61,0,0,287,58,
        1,0,0,0,288,289,5,60,0,0,289,60,1,0,0,0,290,291,5,60,0,0,291,292,
        5,61,0,0,292,62,1,0,0,0,293,294,5,62,0,0,294,64,1,0,0,0,295,296,
        5,62,0,0,296,297,5,61,0,0,297,66,1,0,0,0,298,299,5,38,0,0,299,300,
        5,38,0,0,300,68,1,0,0,0,301,302,5,124,0,0,302,303,5,124,0,0,303,
        70,1,0,0,0,304,305,5,33,0,0,305,72,1,0,0,0,306,307,5,61,0,0,307,
        74,1,0,0,0,308,309,5,58,0,0,309,310,5,61,0,0,310,76,1,0,0,0,311,
        312,5,43,0,0,312,313,5,61,0,0,313,78,1,0,0,0,314,315,5,45,0,0,315,
        316,5,61,0,0,316,80,1,0,0,0,317,318,5,42,0,0,318,319,5,61,0,0,319,
        82,1,0,0,0,320,321,5,47,0,0,321,322,5,61,0,0,322,84,1,0,0,0,323,
        324,5,37,0,0,324,325,5,61,0,0,325,86,1,0,0,0,326,327,5,46,0,0,327,
        88,1,0,0,0,328,329,5,40,0,0,329,90,1,0,0,0,330,331,5,41,0,0,331,
        92,1,0,0,0,332,333,5,123,0,0,333,94,1,0,0,0,334,335,5,125,0,0,335,
        96,1,0,0,0,336,337,5,91,0,0,337,98,1,0,0,0,338,339,5,93,0,0,339,
        100,1,0,0,0,340,341,5,58,0,0,341,102,1,0,0,0,342,343,5,44,0,0,343,
        104,1,0,0,0,344,345,5,59,0,0,345,106,1,0,0,0,346,350,7,0,0,0,347,
        349,7,1,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,
        351,1,0,0,0,351,108,1,0,0,0,352,350,1,0,0,0,353,354,5,48,0,0,354,
        358,5,98,0,0,355,356,5,48,0,0,356,358,5,66,0,0,357,353,1,0,0,0,357,
        355,1,0,0,0,358,360,1,0,0,0,359,361,7,2,0,0,360,359,1,0,0,0,361,
        362,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,
        365,6,54,0,0,365,110,1,0,0,0,366,367,5,48,0,0,367,371,5,111,0,0,
        368,369,5,48,0,0,369,371,5,79,0,0,370,366,1,0,0,0,370,368,1,0,0,
        0,371,373,1,0,0,0,372,374,7,3,0,0,373,372,1,0,0,0,374,375,1,0,0,
        0,375,373,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,6,55,0,
        0,378,112,1,0,0,0,379,380,5,48,0,0,380,384,5,120,0,0,381,382,5,48,
        0,0,382,384,5,88,0,0,383,379,1,0,0,0,383,381,1,0,0,0,384,386,1,0,
        0,0,385,387,7,4,0,0,386,385,1,0,0,0,387,388,1,0,0,0,388,386,1,0,
        0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,6,56,0,0,391,114,1,0,
        0,0,392,393,7,5,0,0,393,116,1,0,0,0,394,403,5,48,0,0,395,399,7,6,
        0,0,396,398,3,115,57,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,
        0,0,0,399,400,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,402,394,1,
        0,0,0,402,395,1,0,0,0,403,118,1,0,0,0,404,406,3,115,57,0,405,404,
        1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,411,
        1,0,0,0,409,407,1,0,0,0,410,407,1,0,0,0,410,411,1,0,0,0,411,120,
        1,0,0,0,412,414,7,7,0,0,413,415,7,8,0,0,414,413,1,0,0,0,414,415,
        1,0,0,0,415,417,1,0,0,0,416,418,3,115,57,0,417,416,1,0,0,0,418,419,
        1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,412,
        1,0,0,0,421,422,1,0,0,0,422,122,1,0,0,0,423,432,5,48,0,0,424,428,
        7,6,0,0,425,427,3,115,57,0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,
        1,0,0,0,428,429,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,431,423,
        1,0,0,0,431,424,1,0,0,0,432,124,1,0,0,0,433,435,3,115,57,0,434,433,
        1,0,0,0,435,436,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,438,
        1,0,0,0,438,439,3,87,43,0,439,440,3,119,59,0,440,441,3,121,60,0,
        441,126,1,0,0,0,442,443,5,92,0,0,443,444,7,9,0,0,444,128,1,0,0,0,
        445,446,5,92,0,0,446,447,8,9,0,0,447,130,1,0,0,0,448,451,8,10,0,
        0,449,451,3,127,63,0,450,448,1,0,0,0,450,449,1,0,0,0,451,132,1,0,
        0,0,452,456,5,34,0,0,453,455,3,131,65,0,454,453,1,0,0,0,455,458,
        1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,456,
        1,0,0,0,459,460,5,34,0,0,460,134,1,0,0,0,461,463,7,11,0,0,462,461,
        1,0,0,0,463,464,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,466,
        1,0,0,0,466,467,6,67,1,0,467,136,1,0,0,0,468,470,5,13,0,0,469,468,
        1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,472,5,10,0,0,472,473,
        1,0,0,0,473,474,6,68,2,0,474,138,1,0,0,0,475,476,5,47,0,0,476,477,
        5,42,0,0,477,482,1,0,0,0,478,481,3,139,69,0,479,481,9,0,0,0,480,
        478,1,0,0,0,480,479,1,0,0,0,481,484,1,0,0,0,482,483,1,0,0,0,482,
        480,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,0,485,486,5,42,0,0,486,
        487,5,47,0,0,487,488,1,0,0,0,488,489,6,69,1,0,489,140,1,0,0,0,490,
        491,5,47,0,0,491,492,5,47,0,0,492,496,1,0,0,0,493,495,8,12,0,0,494,
        493,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,
        499,1,0,0,0,498,496,1,0,0,0,499,500,6,70,1,0,500,142,1,0,0,0,501,
        502,9,0,0,0,502,503,6,71,3,0,503,144,1,0,0,0,504,508,5,34,0,0,505,
        507,3,131,65,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,1,0,0,0,508,
        509,1,0,0,0,509,514,1,0,0,0,510,508,1,0,0,0,511,512,5,13,0,0,512,
        515,5,10,0,0,513,515,7,13,0,0,514,511,1,0,0,0,514,513,1,0,0,0,515,
        516,1,0,0,0,516,517,6,72,4,0,517,146,1,0,0,0,518,522,5,34,0,0,519,
        521,3,131,65,0,520,519,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,
        523,1,0,0,0,523,525,1,0,0,0,524,522,1,0,0,0,525,526,3,129,64,0,526,
        527,6,73,5,0,527,148,1,0,0,0,29,0,151,350,357,362,370,375,383,388,
        399,402,407,410,414,419,421,428,431,436,450,456,464,469,480,482,
        496,508,514,522,6,7,55,0,6,0,0,1,68,0,1,71,1,1,72,2,1,73,3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOL_LIT = 1
    NIL_LIT = 2
    IF = 3
    ELSE = 4
    FOR = 5
    RETURN = 6
    FUNC = 7
    TYPE = 8
    STRUCT = 9
    INTERFACE = 10
    STRING = 11
    INT = 12
    FLOAT = 13
    BOOLEAN = 14
    CONST = 15
    VAR = 16
    CONTINUE = 17
    BREAK = 18
    RANGE = 19
    NIL = 20
    TRUE = 21
    FALSE = 22
    ADD = 23
    SUB = 24
    MUL = 25
    DIV = 26
    MOD = 27
    IS_EQUAL = 28
    IS_DIFF = 29
    LT = 30
    LT_EQUAL = 31
    GT = 32
    GT_EQUAL = 33
    AND = 34
    OR = 35
    NOT = 36
    ASSIGN = 37
    ASSIGN_COLON = 38
    ADD_ASSIGN = 39
    SUB_ASSIGN = 40
    MUL_ASSIGN = 41
    DIV_ASSIGN = 42
    MOD_ASSIGN = 43
    DOT = 44
    LEFT_PAREN = 45
    RIGHT_PAREN = 46
    LEFT_CURLY = 47
    RIGHT_CURLY = 48
    LEFT_SQUARE = 49
    RIGHT_SQUARE = 50
    COLON = 51
    COMMA = 52
    SEMICOLON = 53
    ID = 54
    INT_LIT = 55
    FLOAT_LIT = 56
    STRING_LIT = 57
    WS = 58
    NEWLINE = 59
    COMMENT_BLOCK = 60
    COMMENT_LINE = 61
    ERROR_CHAR = 62
    UNCLOSE_STRING = 63
    ILLEGAL_ESCAPE = 64

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "':'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL_LIT", "NIL_LIT", "IF", "ELSE", "FOR", "RETURN", "FUNC", 
            "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
            "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", 
            "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", "IS_EQUAL", "IS_DIFF", 
            "LT", "LT_EQUAL", "GT", "GT_EQUAL", "AND", "OR", "NOT", "ASSIGN", 
            "ASSIGN_COLON", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
            "MOD_ASSIGN", "DOT", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_CURLY", 
            "RIGHT_CURLY", "LEFT_SQUARE", "RIGHT_SQUARE", "COLON", "COMMA", 
            "SEMICOLON", "ID", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "WS", 
            "NEWLINE", "COMMENT_BLOCK", "COMMENT_LINE", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "BOOL_LIT", "NIL_LIT", "IF", "ELSE", "FOR", "RETURN", 
                  "FUNC", "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", 
                  "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", 
                  "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
                  "DIV", "MOD", "IS_EQUAL", "IS_DIFF", "LT", "LT_EQUAL", 
                  "GT", "GT_EQUAL", "AND", "OR", "NOT", "ASSIGN", "ASSIGN_COLON", 
                  "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                  "MOD_ASSIGN", "DOT", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_CURLY", 
                  "RIGHT_CURLY", "LEFT_SQUARE", "RIGHT_SQUARE", "COLON", 
                  "COMMA", "SEMICOLON", "ID", "BIN_INT_LIT", "OCT_INT_LIT", 
                  "HEX_INT_LIT", "DIGIT", "DIGITS", "OPT_FRAC", "OPT_EXP", 
                  "INT_LIT", "FLOAT_LIT", "ESC_SEQ", "ILLEGAL_ESC_SEQ", 
                  "STRING_CHAR", "STRING_LIT", "WS", "NEWLINE", "COMMENT_BLOCK", 
                  "COMMENT_LINE", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



    lastTokenType = 0

    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            self.lastTokenType = result.type
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            self.lastTokenType = result.type
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            self.lastTokenType = result.type
            raise ErrorToken(result.text); 
        else:
            result = super().emit();
            self.lastTokenType = result.type
            return result;


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[68] = self.NEWLINE_action 
            actions[71] = self.ERROR_CHAR_action 
            actions[72] = self.UNCLOSE_STRING_action 
            actions[73] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                if self.lastTokenType == self.RIGHT_SQUARE or self.lastTokenType == self.RIGHT_PAREN or self.lastTokenType == self.RIGHT_CURLY or self.lastTokenType == self.ID or self.lastTokenType == self.INT_LIT or self.lastTokenType == self.FLOAT_LIT or self.lastTokenType == self.BOOL_LIT or self.lastTokenType == self.STRING_LIT or self.lastTokenType == self.INT or self.lastTokenType == self.FLOAT or self.lastTokenType == self.BOOLEAN or self.lastTokenType == self.STRING or self.lastTokenType == self.RETURN or self.lastTokenType == self.CONTINUE or self.lastTokenType == self.BREAK or self.lastTokenType == self.NIL_LIT:
                    self.text = ";"
                    self.type = self.SEMICOLON
                else:
                    self.skip()

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                if self.text[-1] == '\n':
                    if self.text[-2] == '\r':
                        self.text = self.text[:-2]
                    else:
                        self.text = self.text[:-1]
                elif self.text[-1] == '\r':
                    self.text = self.text[: -1]
                else:
                    self.text = self.text[:]
                raise UncloseString(self.text)

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                raise IllegalEscape(self.text[:])

     


