# Generated from c://Code//PPL//BTL//src//main//minigo//parser//MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,64,518,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,
        28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,
        33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,
        38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,
        43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,
        49,1,50,1,50,1,51,1,51,5,51,343,8,51,10,51,12,51,346,9,51,1,52,1,
        52,1,52,1,52,3,52,352,8,52,1,52,4,52,355,8,52,11,52,12,52,356,1,
        52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,367,8,53,1,53,4,53,370,
        8,53,11,53,12,53,371,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,3,54,
        382,8,54,1,54,4,54,385,8,54,11,54,12,54,386,1,54,1,54,1,54,1,54,
        1,55,1,55,1,56,1,56,1,56,5,56,398,8,56,10,56,12,56,401,9,56,3,56,
        403,8,56,1,57,1,57,5,57,407,8,57,10,57,12,57,410,9,57,3,57,412,8,
        57,1,58,1,58,3,58,416,8,58,1,58,3,58,419,8,58,1,59,1,59,1,60,1,60,
        1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,3,63,435,8,63,
        1,64,1,64,5,64,439,8,64,10,64,12,64,442,9,64,1,64,1,64,1,64,1,65,
        1,65,3,65,449,8,65,1,66,1,66,1,67,4,67,454,8,67,11,67,12,67,455,
        1,67,1,67,1,68,3,68,461,8,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,
        1,69,1,69,5,69,472,8,69,10,69,12,69,475,9,69,1,69,1,69,1,69,1,69,
        1,69,1,70,1,70,1,70,1,70,5,70,486,8,70,10,70,12,70,489,9,70,1,70,
        1,70,1,71,1,71,1,71,1,72,1,72,5,72,498,8,72,10,72,12,72,501,9,72,
        1,72,3,72,504,8,72,1,72,1,72,1,73,1,73,5,73,510,8,73,10,73,12,73,
        513,9,73,1,73,1,73,1,73,1,73,1,473,0,74,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,0,107,0,109,0,111,0,113,0,115,0,117,0,119,53,121,54,
        123,0,125,0,127,0,129,55,131,56,133,57,135,58,137,59,139,60,141,
        61,143,62,145,63,147,64,1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,49,1,0,48,55,3,0,48,57,65,70,97,102,1,
        0,48,57,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,5,0,34,34,92,
        92,110,110,114,114,116,116,4,0,10,10,13,13,34,34,92,92,3,0,9,9,12,
        13,32,32,2,0,10,10,13,13,2,1,10,10,13,13,533,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
        0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
        0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
        0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,119,1,0,0,0,0,121,
        1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
        0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,
        0,0,0,0,147,1,0,0,0,1,149,1,0,0,0,3,152,1,0,0,0,5,157,1,0,0,0,7,
        161,1,0,0,0,9,168,1,0,0,0,11,173,1,0,0,0,13,178,1,0,0,0,15,185,1,
        0,0,0,17,195,1,0,0,0,19,202,1,0,0,0,21,206,1,0,0,0,23,212,1,0,0,
        0,25,220,1,0,0,0,27,226,1,0,0,0,29,230,1,0,0,0,31,239,1,0,0,0,33,
        245,1,0,0,0,35,251,1,0,0,0,37,255,1,0,0,0,39,260,1,0,0,0,41,266,
        1,0,0,0,43,268,1,0,0,0,45,270,1,0,0,0,47,272,1,0,0,0,49,274,1,0,
        0,0,51,276,1,0,0,0,53,279,1,0,0,0,55,282,1,0,0,0,57,284,1,0,0,0,
        59,287,1,0,0,0,61,289,1,0,0,0,63,292,1,0,0,0,65,295,1,0,0,0,67,298,
        1,0,0,0,69,300,1,0,0,0,71,302,1,0,0,0,73,305,1,0,0,0,75,308,1,0,
        0,0,77,311,1,0,0,0,79,314,1,0,0,0,81,317,1,0,0,0,83,320,1,0,0,0,
        85,322,1,0,0,0,87,324,1,0,0,0,89,326,1,0,0,0,91,328,1,0,0,0,93,330,
        1,0,0,0,95,332,1,0,0,0,97,334,1,0,0,0,99,336,1,0,0,0,101,338,1,0,
        0,0,103,340,1,0,0,0,105,351,1,0,0,0,107,366,1,0,0,0,109,381,1,0,
        0,0,111,392,1,0,0,0,113,402,1,0,0,0,115,411,1,0,0,0,117,418,1,0,
        0,0,119,420,1,0,0,0,121,422,1,0,0,0,123,426,1,0,0,0,125,429,1,0,
        0,0,127,434,1,0,0,0,129,436,1,0,0,0,131,448,1,0,0,0,133,450,1,0,
        0,0,135,453,1,0,0,0,137,460,1,0,0,0,139,466,1,0,0,0,141,481,1,0,
        0,0,143,492,1,0,0,0,145,495,1,0,0,0,147,507,1,0,0,0,149,150,5,105,
        0,0,150,151,5,102,0,0,151,2,1,0,0,0,152,153,5,101,0,0,153,154,5,
        108,0,0,154,155,5,115,0,0,155,156,5,101,0,0,156,4,1,0,0,0,157,158,
        5,102,0,0,158,159,5,111,0,0,159,160,5,114,0,0,160,6,1,0,0,0,161,
        162,5,114,0,0,162,163,5,101,0,0,163,164,5,116,0,0,164,165,5,117,
        0,0,165,166,5,114,0,0,166,167,5,110,0,0,167,8,1,0,0,0,168,169,5,
        102,0,0,169,170,5,117,0,0,170,171,5,110,0,0,171,172,5,99,0,0,172,
        10,1,0,0,0,173,174,5,116,0,0,174,175,5,121,0,0,175,176,5,112,0,0,
        176,177,5,101,0,0,177,12,1,0,0,0,178,179,5,115,0,0,179,180,5,116,
        0,0,180,181,5,114,0,0,181,182,5,117,0,0,182,183,5,99,0,0,183,184,
        5,116,0,0,184,14,1,0,0,0,185,186,5,105,0,0,186,187,5,110,0,0,187,
        188,5,116,0,0,188,189,5,101,0,0,189,190,5,114,0,0,190,191,5,102,
        0,0,191,192,5,97,0,0,192,193,5,99,0,0,193,194,5,101,0,0,194,16,1,
        0,0,0,195,196,5,115,0,0,196,197,5,116,0,0,197,198,5,114,0,0,198,
        199,5,105,0,0,199,200,5,110,0,0,200,201,5,103,0,0,201,18,1,0,0,0,
        202,203,5,105,0,0,203,204,5,110,0,0,204,205,5,116,0,0,205,20,1,0,
        0,0,206,207,5,102,0,0,207,208,5,108,0,0,208,209,5,111,0,0,209,210,
        5,97,0,0,210,211,5,116,0,0,211,22,1,0,0,0,212,213,5,98,0,0,213,214,
        5,111,0,0,214,215,5,111,0,0,215,216,5,108,0,0,216,217,5,101,0,0,
        217,218,5,97,0,0,218,219,5,110,0,0,219,24,1,0,0,0,220,221,5,99,0,
        0,221,222,5,111,0,0,222,223,5,110,0,0,223,224,5,115,0,0,224,225,
        5,116,0,0,225,26,1,0,0,0,226,227,5,118,0,0,227,228,5,97,0,0,228,
        229,5,114,0,0,229,28,1,0,0,0,230,231,5,99,0,0,231,232,5,111,0,0,
        232,233,5,110,0,0,233,234,5,116,0,0,234,235,5,105,0,0,235,236,5,
        110,0,0,236,237,5,117,0,0,237,238,5,101,0,0,238,30,1,0,0,0,239,240,
        5,98,0,0,240,241,5,114,0,0,241,242,5,101,0,0,242,243,5,97,0,0,243,
        244,5,107,0,0,244,32,1,0,0,0,245,246,5,114,0,0,246,247,5,97,0,0,
        247,248,5,110,0,0,248,249,5,103,0,0,249,250,5,101,0,0,250,34,1,0,
        0,0,251,252,5,110,0,0,252,253,5,105,0,0,253,254,5,108,0,0,254,36,
        1,0,0,0,255,256,5,116,0,0,256,257,5,114,0,0,257,258,5,117,0,0,258,
        259,5,101,0,0,259,38,1,0,0,0,260,261,5,102,0,0,261,262,5,97,0,0,
        262,263,5,108,0,0,263,264,5,115,0,0,264,265,5,101,0,0,265,40,1,0,
        0,0,266,267,5,43,0,0,267,42,1,0,0,0,268,269,5,45,0,0,269,44,1,0,
        0,0,270,271,5,42,0,0,271,46,1,0,0,0,272,273,5,47,0,0,273,48,1,0,
        0,0,274,275,5,37,0,0,275,50,1,0,0,0,276,277,5,61,0,0,277,278,5,61,
        0,0,278,52,1,0,0,0,279,280,5,33,0,0,280,281,5,61,0,0,281,54,1,0,
        0,0,282,283,5,60,0,0,283,56,1,0,0,0,284,285,5,60,0,0,285,286,5,61,
        0,0,286,58,1,0,0,0,287,288,5,62,0,0,288,60,1,0,0,0,289,290,5,62,
        0,0,290,291,5,61,0,0,291,62,1,0,0,0,292,293,5,38,0,0,293,294,5,38,
        0,0,294,64,1,0,0,0,295,296,5,124,0,0,296,297,5,124,0,0,297,66,1,
        0,0,0,298,299,5,33,0,0,299,68,1,0,0,0,300,301,5,61,0,0,301,70,1,
        0,0,0,302,303,5,58,0,0,303,304,5,61,0,0,304,72,1,0,0,0,305,306,5,
        43,0,0,306,307,5,61,0,0,307,74,1,0,0,0,308,309,5,45,0,0,309,310,
        5,61,0,0,310,76,1,0,0,0,311,312,5,42,0,0,312,313,5,61,0,0,313,78,
        1,0,0,0,314,315,5,47,0,0,315,316,5,61,0,0,316,80,1,0,0,0,317,318,
        5,37,0,0,318,319,5,61,0,0,319,82,1,0,0,0,320,321,5,46,0,0,321,84,
        1,0,0,0,322,323,5,40,0,0,323,86,1,0,0,0,324,325,5,41,0,0,325,88,
        1,0,0,0,326,327,5,123,0,0,327,90,1,0,0,0,328,329,5,125,0,0,329,92,
        1,0,0,0,330,331,5,91,0,0,331,94,1,0,0,0,332,333,5,93,0,0,333,96,
        1,0,0,0,334,335,5,58,0,0,335,98,1,0,0,0,336,337,5,44,0,0,337,100,
        1,0,0,0,338,339,5,59,0,0,339,102,1,0,0,0,340,344,7,0,0,0,341,343,
        7,1,0,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,
        1,0,0,0,345,104,1,0,0,0,346,344,1,0,0,0,347,348,5,48,0,0,348,352,
        5,98,0,0,349,350,5,48,0,0,350,352,5,66,0,0,351,347,1,0,0,0,351,349,
        1,0,0,0,352,354,1,0,0,0,353,355,7,2,0,0,354,353,1,0,0,0,355,356,
        1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,359,
        6,52,0,0,359,360,1,0,0,0,360,361,6,52,1,0,361,106,1,0,0,0,362,363,
        5,48,0,0,363,367,5,111,0,0,364,365,5,48,0,0,365,367,5,79,0,0,366,
        362,1,0,0,0,366,364,1,0,0,0,367,369,1,0,0,0,368,370,7,3,0,0,369,
        368,1,0,0,0,370,371,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,
        373,1,0,0,0,373,374,6,53,2,0,374,375,1,0,0,0,375,376,6,53,1,0,376,
        108,1,0,0,0,377,378,5,48,0,0,378,382,5,120,0,0,379,380,5,48,0,0,
        380,382,5,88,0,0,381,377,1,0,0,0,381,379,1,0,0,0,382,384,1,0,0,0,
        383,385,7,4,0,0,384,383,1,0,0,0,385,386,1,0,0,0,386,384,1,0,0,0,
        386,387,1,0,0,0,387,388,1,0,0,0,388,389,6,54,3,0,389,390,1,0,0,0,
        390,391,6,54,1,0,391,110,1,0,0,0,392,393,7,5,0,0,393,112,1,0,0,0,
        394,403,5,48,0,0,395,399,7,6,0,0,396,398,3,111,55,0,397,396,1,0,
        0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,403,1,0,
        0,0,401,399,1,0,0,0,402,394,1,0,0,0,402,395,1,0,0,0,403,114,1,0,
        0,0,404,408,5,46,0,0,405,407,3,111,55,0,406,405,1,0,0,0,407,410,
        1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,412,1,0,0,0,410,408,
        1,0,0,0,411,404,1,0,0,0,411,412,1,0,0,0,412,116,1,0,0,0,413,415,
        7,7,0,0,414,416,7,8,0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,
        1,0,0,0,417,419,3,113,56,0,418,413,1,0,0,0,418,419,1,0,0,0,419,118,
        1,0,0,0,420,421,3,113,56,0,421,120,1,0,0,0,422,423,3,113,56,0,423,
        424,3,115,57,0,424,425,3,117,58,0,425,122,1,0,0,0,426,427,5,92,0,
        0,427,428,7,9,0,0,428,124,1,0,0,0,429,430,5,92,0,0,430,431,8,9,0,
        0,431,126,1,0,0,0,432,435,8,10,0,0,433,435,3,123,61,0,434,432,1,
        0,0,0,434,433,1,0,0,0,435,128,1,0,0,0,436,440,5,34,0,0,437,439,3,
        127,63,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,
        1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,444,5,34,0,0,444,445,
        6,64,4,0,445,130,1,0,0,0,446,449,3,37,18,0,447,449,3,39,19,0,448,
        446,1,0,0,0,448,447,1,0,0,0,449,132,1,0,0,0,450,451,3,35,17,0,451,
        134,1,0,0,0,452,454,7,11,0,0,453,452,1,0,0,0,454,455,1,0,0,0,455,
        453,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,458,6,67,5,0,458,
        136,1,0,0,0,459,461,5,13,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,
        462,1,0,0,0,462,463,5,10,0,0,463,464,1,0,0,0,464,465,6,68,6,0,465,
        138,1,0,0,0,466,467,5,47,0,0,467,468,5,42,0,0,468,473,1,0,0,0,469,
        472,3,139,69,0,470,472,9,0,0,0,471,469,1,0,0,0,471,470,1,0,0,0,472,
        475,1,0,0,0,473,474,1,0,0,0,473,471,1,0,0,0,474,476,1,0,0,0,475,
        473,1,0,0,0,476,477,5,42,0,0,477,478,5,47,0,0,478,479,1,0,0,0,479,
        480,6,69,5,0,480,140,1,0,0,0,481,482,5,47,0,0,482,483,5,47,0,0,483,
        487,1,0,0,0,484,486,8,12,0,0,485,484,1,0,0,0,486,489,1,0,0,0,487,
        485,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,487,1,0,0,0,490,
        491,6,70,5,0,491,142,1,0,0,0,492,493,9,0,0,0,493,494,6,71,7,0,494,
        144,1,0,0,0,495,499,5,34,0,0,496,498,3,127,63,0,497,496,1,0,0,0,
        498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,503,1,0,0,0,
        501,499,1,0,0,0,502,504,7,13,0,0,503,502,1,0,0,0,504,505,1,0,0,0,
        505,506,6,72,8,0,506,146,1,0,0,0,507,511,5,34,0,0,508,510,3,127,
        63,0,509,508,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,
        0,0,512,514,1,0,0,0,513,511,1,0,0,0,514,515,3,125,62,0,515,516,5,
        34,0,0,516,517,6,73,9,0,517,148,1,0,0,0,25,0,344,351,356,366,371,
        381,386,399,402,408,411,415,418,434,440,448,455,460,471,473,487,
        499,503,511,10,1,52,0,7,53,0,1,53,1,1,54,2,1,64,3,6,0,0,1,68,4,1,
        71,5,1,72,6,1,73,7
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    ADD = 21
    SUB = 22
    MUL = 23
    DIV = 24
    MOD = 25
    IS_EQUAL = 26
    IS_DIFF = 27
    LT = 28
    LT_EQUAL = 29
    GT = 30
    GT_EQUAL = 31
    AND = 32
    OR = 33
    NOT = 34
    ASSIGN = 35
    ASSIGN_COLON = 36
    ADD_ASSIGN = 37
    SUB_ASSIGN = 38
    MUL_ASSIGN = 39
    DIV_ASSIGN = 40
    MOD_ASSIGN = 41
    DOT = 42
    LEFT_PAREN = 43
    RIGHT_PAREN = 44
    LEFT_CURLY = 45
    RIGHT_CURLY = 46
    LEFT_SQUARE = 47
    RIGHT_SQUARE = 48
    COLON = 49
    COMMA = 50
    SEMICOLON = 51
    ID = 52
    INT_LIT = 53
    FLOAT_LIT = 54
    STRING_LIT = 55
    BOOL_LIT = 56
    NIL_LIT = 57
    WS = 58
    NEWLINE = 59
    COMMENT_BLOCK = 60
    COMMENT_LINE = 61
    ERROR_CHAR = 62
    UNCLOSE_STRING = 63
    ILLEGAL_ESCAPE = 64

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "':'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "IS_EQUAL", "IS_DIFF", "LT", "LT_EQUAL", "GT", 
            "GT_EQUAL", "AND", "OR", "NOT", "ASSIGN", "ASSIGN_COLON", "ADD_ASSIGN", 
            "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", 
            "LEFT_PAREN", "RIGHT_PAREN", "LEFT_CURLY", "RIGHT_CURLY", "LEFT_SQUARE", 
            "RIGHT_SQUARE", "COLON", "COMMA", "SEMICOLON", "ID", "INT_LIT", 
            "FLOAT_LIT", "STRING_LIT", "BOOL_LIT", "NIL_LIT", "WS", "NEWLINE", 
            "COMMENT_BLOCK", "COMMENT_LINE", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "IS_EQUAL", "IS_DIFF", 
                  "LT", "LT_EQUAL", "GT", "GT_EQUAL", "AND", "OR", "NOT", 
                  "ASSIGN", "ASSIGN_COLON", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "LEFT_PAREN", 
                  "RIGHT_PAREN", "LEFT_CURLY", "RIGHT_CURLY", "LEFT_SQUARE", 
                  "RIGHT_SQUARE", "COLON", "COMMA", "SEMICOLON", "ID", "BIN_INT_LIT", 
                  "OCT_INT_LIT", "HEX_INT_LIT", "DIGIT", "DIGITS", "OPT_FRAC", 
                  "OPT_EXP", "INT_LIT", "FLOAT_LIT", "ESC_SEQ", "ILLEGAL_ESC_SEQ", 
                  "STRING_CHAR", "STRING_LIT", "BOOL_LIT", "NIL_LIT", "WS", 
                  "NEWLINE", "COMMENT_BLOCK", "COMMENT_LINE", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



    lastTokenType = 0

    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            self.lastTokenType = result.type
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            self.lastTokenType = result.type
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            self.lastTokenType = result.type
            raise ErrorToken(result.text); 
        else:
            result = super().emit();
            self.lastTokenType = result.type
            return result;


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[52] = self.BIN_INT_LIT_action 
            actions[53] = self.OCT_INT_LIT_action 
            actions[54] = self.HEX_INT_LIT_action 
            actions[64] = self.STRING_LIT_action 
            actions[68] = self.NEWLINE_action 
            actions[71] = self.ERROR_CHAR_action 
            actions[72] = self.UNCLOSE_STRING_action 
            actions[73] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def BIN_INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                self.text = str(int(self.text, 0))

     

    def OCT_INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

                self.text = str(int(self.text, 0))

     

    def HEX_INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                self.text = str(int(self.text, 0))

     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                self.text = self.text[1:-1]

     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                if self.lastTokenType == self.RIGHT_SQUARE or self.lastTokenType == self.RIGHT_PAREN or self.lastTokenType == self.RIGHT_CURLY or self.lastTokenType == self.ID or self.lastTokenType == self.INT_LIT or self.lastTokenType == self.FLOAT_LIT or self.lastTokenType == self.TRUE or self.lastTokenType == self.FALSE or self.lastTokenType == self.STRING_LIT or self.lastTokenType == self.INT or self.lastTokenType == self.FLOAT or self.lastTokenType == self.BOOLEAN or self.lastTokenType == self.STRING or self.lastTokenType == self.RETURN or self.lastTokenType == self.CONTINUE or self.lastTokenType == self.BREAK:
                    self.text = ";"
                    self.type = self.SEMICOLON
                else:
                    self.skip()

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:

                if self.text[-1] == '\n':
                    if self.text[-2] == '\r':
                        self.text = self.text[1:-2]
                    else:
                        self.text = self.text[1:-1]
                elif self.text[-1] == '\r':
                    self.text = self.text[1: -1]
                else:
                    self.text = self.text[1:]
                raise UncloseString(self.text)

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 7:

                raise IllegalEscape(self.text[1:-1])

     


